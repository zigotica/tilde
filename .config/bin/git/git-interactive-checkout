#!/usr/bin/env bash

# git interactive checkout wrapper
# 
# If argument is missing, select branch, tag or commit using fzf
# fzf provides the fzf list in a simple format:
#   [b] or [r] or [t] or [c] followed by the branch/remotebranch/tag/commit info
# fzf will preview diff of that hash with its previous (git diff --color HASH~ HASH)
#
# If the target branch is currently checked out in any worktree, move there
# Otherwise, try to checkout a branch, remote branch, commit or tag (in that likelihood order)
# Finally, if nothing found, create a branch with that name
#
# Requires: $SPLIT_DELIMITER
# 
# use case: gc (launches fzf to choose from branches, tags or commits; you can filter by typing and intro)
# use case: gc dev (moves to worktree currently using dev branch, or checkout dev branch on current worktree)
# use case: gc -r remotename (launches fzf ... same as above but listing remote named remotename)
# use case: gc branch -r remotename (moves to a remote branch named remotename, if origin is not used; branch must be already fetched)

separator=$(echo $SPLIT_DELIMITER)
REMOTE="origin"

# https://stackoverflow.com/a/63421397
script_args=()
while [ $OPTIND -le "$#" ]
do
  if getopts r: option
  then
    case $option in
      r) REMOTE="$OPTARG";;
    esac
  else
    script_args+=("${!OPTIND}")
    ((OPTIND++))
  fi
done

# logic to use a reference optionally when also using -r
MAIN="$1"
if [[ "$1" == "-r" ]]; then
  MAIN=""
fi

if [[ -z $@ ]] || [[ "$MAIN" == "" ]]; then
  # We didn't write the desired "reference" manually (gc or gc -r remotename)
  # TARGET BUILD LOGIC:
  # 1. Inside the {} we list the references: branches, remote branches, tags and commits
  #    We give these a special format with color and prepending [ref] information
  # 2. sed to remove lines starting by space or tab (TODO still needed?)
  # 3. pipe results through fzf (can be filtered)
  #      each fzf item will preview diff of that hash with its previous
  #      (git diff --color HASH~ HASH)
  # 4. sed to remove lines starting by ' (TODO still needed?)
  # 5. sed to replace spaces with the $sperator, so it's easier to parse later
  # 6. tail -n1: target was a 2 line value
  #      1st line the possibly written filter in the fzf,
  #      2nd line the built construct with separator string
  #      we just need the second one, thus the tail
  target=$({ git for-each-ref refs/heads/ --format='[b] %(color:green)%(refname:short)%(color:reset)' --color=always; git for-each-ref refs/remotes/$REMOTE/ --format='[r] %(color:blue)%(refname:short)%(color:reset)' --color=always; git for-each-ref refs/tags/ --format='[t] %(color:red)%(refname:short)%(color:reset)' --color=always; git log --oneline --abbrev-commit --branches=* --color=always | awk '{print "[c]",$0}'; } \
    | sed -e "s/^[ \t]*//" \
    | fzf --ansi --print-query --preview="echo {} | awk '{ print \"diff --color \" \$2\"~ \" \$2 }' | xargs git" \
    | sed -e "s/^[\']*//" \
    | sed "s/ /$separator/g" \
    | tail -n1)
  if [[ $target != "" ]]; then
    # if selected anything from fzf list, split the separator to get the desired "reference"
    ss=($(split-string $target "$separator"))
    declare -a ss
    query=${ss[1]}
    len=${#ss[@]}
    reftype=${ss[0]}
  else
    # if escaping fzf, exit
    exit 0;
  fi
else
  # We wrote the desired "reference" manually (gc smth or gc smth -r remotename), not using the fzf
  query=$MAIN
fi

# Checks if the target branch is currently checked out in any worktree
wtpath=$(git-worktree -l | awk -v q=$query '$3 == "["q"]" {print $1}')
if [[ $wtpath != "" ]]; then
  if [[ "$wtpath" == *"$separator"* ]]; then
    ss=($(split-string $wtpath $separator))
    declare -a ss
    linkedwt=${ss[1]}
    git-worktree -m $linkedwt
  else
    git-worktree -m
  fi
else
  # no worktree using the same branch/remotebranch/tag/detached commit
  # detect if a branch / remotebranch / commit exist
  # otherwise create a branch with that name
  IS_LOCAL_BRANCH=$(git show-ref --verify --quiet -- refs/heads/"$query" || echo "false")
  IS_REMOTE_BRANCH=$(git show-ref --verify --quiet -- refs/remotes/$REMOTE/"$query" || echo "false")
  IS_COMMIT=$(git cat-file -e $query^{commit} || echo "false")

  # -z $reftype: the value was passed manually
  if [[ -z $reftype && $IS_LOCAL_BRANCH != "false" ]] || [[ $reftype == "[b]" ]]; then
    git checkout "$query"
  elif [[ -z $reftype && $IS_REMOTE_BRANCH != "false" ]] || [[ $reftype == "[r]" ]]; then
    BRANCH=$(echo "$query" | sed "s/^$REMOTE\///g")
    git checkout -b "$BRANCH" $REMOTE/"$BRANCH" || git checkout "$BRANCH"
  elif [[ -z $reftype && $IS_COMMIT != "false" ]] || [[ $reftype == "[c]" ]]; then
    # TODO would it make sense to check remote commits as well?
    git checkout $(git cat-file -e $query^{commit} || echo "-b") $query
  else
    # checkout to new or existing branch
    git checkout -b "$query" ||  git checkout "$query"
  fi
fi

