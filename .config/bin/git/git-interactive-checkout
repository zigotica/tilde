#!/usr/bin/env bash

# git interactive checkout wrapper
# if argument is missing, select branch, tag or commit using fzf
# if the target branch is currently checked out in any worktree, move there
# Requires: $SPLIT_DELIMITER
# use case: gc (launches fzf to choose from branches, tags or commits)
# use case: gc dev (moves to worktree currently using dev branch, or checkout dev branch on current worktree)

separator=$(echo $SPLIT_DELIMITER)

if [[ -z $@ ]]; then
  # if no argument, fzf list of branches, tags and commits
  # provide the fzf in a simple format:
  # branch/tag/commit (space) [heads] or [tags] or commit message
  target=$({ git for-each-ref refs/heads/ refs/tags/ ; git log --oneline --abbrev-commit --branches=* ; } | awk '{ if($2=="commit") { split($0,a,/\//); print a[3] " [" a[2] "]" } if($2!="commit") { print $0 } }' | fzf-tmux --print-query | sed "s/ /$separator/g" | tail -1)
  if [[ $target != "" ]]; then
    # if selected from fzf list
    ss=($(split-string $target "$separator"))
    declare -a ss
    query=${ss[0]}
    len=${#ss[@]}
    last=${ss[ len - 1 ]}
    if [[ $last != "[heads]" ]] && [[ $last != "[tags]" ]]; then
      last="commit"
    fi
  else
    exit 0;
  fi
else
  query=$1
fi

# Checks if the target branch is currently checked out in any worktree
wtpath=$(git-worktree -l | awk -v q=$query '$3 == "["q"]" {print $1}')
if [[ $wtpath != "" ]]; then
  if [[ "$wtpath" == *"$separator"* ]]; then
    ss=($(split-string $wtpath $separator))
    declare -a ss
    linkedwt=${ss[1]}
    git-worktree -m $linkedwt
  else
    git-worktree -m
  fi
else
  # no worktree using the same branch/tag/detached commit
  # detect if a branch / tag / commit exist
  # otherwise create a branc with that name
  if [[ -z $last ]]; then
    # use the value passed manually
    # try to find the best math, by order (branch > tag > commit)
    git checkout $(git show-ref --verify --quiet refs/heads/"$query" || git show-ref --verify --quiet refs/tags/"$query" || git cat-file -e $query^{commit} || echo "-b") $query
  elif [[ $type == "[heads]" ]]; then
    git checkout $(git show-ref --verify --quiet refs/heads/"$query" || echo "-b") $query
  elif [[ $type == "[tags]" ]]; then
    git checkout $(git show-ref --verify --quiet refs/tags/"$query" || echo "-b") $query
  else
    git checkout $(git cat-file -e $query^{commit} || echo "-b") $query
  fi
fi

