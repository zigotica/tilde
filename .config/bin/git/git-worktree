#!/usr/bin/env bash

# git worktree wrapper
# Requires:
# - git-get-branch, get-folder-parent-path, get-folder-name, split-string (.config/bin/...)
# - to be run in the root of the repository/worktrees
# - $SPLIT_DELIMITER
# Mandatory options (one of the five):
# -l: list
# -p: prune
# -a <wt>: add worktree
# -r <wt>: remove worktree
# -m [<wt>]: move to linked worktree (main if option value missing)
# Non mandatory options:
# -n <new branch>
# -f <from branch>
# use case: gwt -l | -p | -a <wt> | -r <wt> | -m [<wt>] [-f <from branch>] [-n <new branch>]
# example: gwt (list worktrees via fzf and moves to the selected wt)
# example: gwt -l (list worktrees)
# example: gwt -p (prune worktrees)
# example: gwt -a name -f dev (add "name" worktree from dev branch)
# example: gwt -a name -f dev -n fix23 (add "name" worktree from dev branch, checkout new fix23 branch)
# example: gwt -r name (removes linked "name" worktree)
# example: gwt -m name (move to linked "name" worktree)
# example: gwt -m (move to main worktree)

separator=$(echo $SPLIT_DELIMITER)

err() {
  echo $1
  if [ -n "$2" ]; then
    shift
    eval $*
    # https://askubuntu.com/a/1326059
    $SHELL
  fi
  echo "Usage: gwt -l | -p | -a <wt> | -r <wt> | -m [<wt>] [-f <from branch>] [-n <new branch>]" >&2
  exit 1
}

# https://stackoverflow.com/a/57295993
getopts_get_optional_argument() {
  eval next_token=\${$OPTIND}
  if [[ -n $next_token && $next_token != -* ]]; then
    OPTIND=$((OPTIND + 1))
    OPTARG=$next_token
  else
    OPTARG=""
  fi
}

while getopts lpa:r:mf:n: option
do
  case "${option}" in
    l) git worktree list;exit 0;;
    p) git worktree prune;exit 0;;
    a) action="add";wt=${OPTARG};;
    r) action="remove";wt=${OPTARG};;
    m) action="move"
       getopts_get_optional_argument $@
       wt=${OPTARG}
       ;;
    f) fb=${OPTARG};;
    n) nb=${OPTARG};;
    *) 
      echo "Not a valid argument for gwt. "
      ;;
  esac
done

if [[ -z $@ ]]; then
  # We didn't write any option (gwt)
  # 1. List all current worktrees
  # 2. pipe results through fzf (can be filtered)
  target=$(git worktree list | fzf)
  if [[ $target != "" ]]; then
    # if selected anything from fzf list,
    # parse it to build the vars as if we had passed the options via args
    target=$(echo "$target" | awk '{print $1}')
    ss=($(split-string $target "$separator"))
    declare -a ss
    query=${ss[1]}
    action="move"
    wt="$query"
  else
    # escaped fzf, exit
    exit 0
  fi
fi

if [ -z "$action" ]; then
  err "Missing -a, -r, -m, -p or -l option (one of the five). "
fi

if [ -z "$fb" ]; then
  fb=$(git-get-branch)
  if [[ $fb == "" ]]; then
    err "Script has to be run from the root of a repository/worktree"
  fi
fi

# Generate paths
parent=$(get-folder-parent-path)
folder=$(get-folder-name)
base="$parent/$folder"
dest="$base$separator$fb"

if [ -n $action ]; then
  # Check to see if $folder includes $separator
  # If so, split to extract the "main worktree" name
  # Otherwise skip it, we ar ealready in main
  main=$folder

  if [[ "$folder" == *"$separator"* ]]; then
    parts=($(split-string $folder $separator))
    declare -a parts
    main=${parts[0]}
  fi

  # Build the desired "linked worktree" path using the name passed as argument
  dest="$parent/$main$separator$wt"
  base="$parent/$main"
fi

if [ $action == "move" ] && [[ $wt == "" ]]; then
  # If move action has no value, change to main worktree
  goto $base
  # https://askubuntu.com/a/1326059
  $SHELL
fi

# Check if desired destination folder exists
exists=0
[ -d "$dest" ] && exists=1

# logic
if [ $exists == 1 ]; then
  if [ $action == "add" ]; then
    err "Cannot create an existing folder at $dest, move instead" goto "$dest"
  elif [ $action == "move" ]; then
    goto "$dest"
    # https://askubuntu.com/a/1326059
    $SHELL
  else
    destfolder=$(get-folder-name $dest)
    if [[ $folder == $destfolder ]]; then
      # if removing current, close vim/neovim first, to avoid widow swap files
      # https://superuser.com/a/1792460
      tmux list-panes -sF "#{pane_id} #{pane_current_command}" \
        | awk '/vim|nvim/ {print $1}' \
        | xargs -I {} tmux send-keys -t {} "C-[" ":%bdelete" "C-m" "ZQ"
      # then move to main
      goto "$base"
    fi
    git worktree remove $dest
    # kill potentially active tmux session
    tmux-killer $destfolder
    # https://askubuntu.com/a/1326059
    $SHELL
  fi
else
  if [ $action == "add" ]; then
    if [ -z $nb ]; then
      # if not creating a new branch and is already checked out, skip
      checkedout=$(git-worktree -l | awk '{print $3}' | grep "[$fb]" | wc -l | xargs)
      if [ "$checkedout" == 1 ]; then
        err "Branch $fb already checked out in a worktree" git-worktree -l
      fi
      git worktree add $dest $fb
    else
      git worktree add -b $nb $dest $fb
    fi
    goto "$dest"
    $SHELL
  elif [ $action == "move" ]; then
    err "Cannot move to missing worktree $wt, move to main worktree instead" goto "$base"
  else
    err "Cannot remove a missing worktree $wt, list worktrees" git-worktree -l
  fi
fi

