#!/usr/bin/env bash
#####################################################################################
#                                                                          CONNECTION
#####################################################################################
function __is_ssh() {
  if is-session-ssh; then
    echo -ne "${Red} "
  else
    echo ""
  fi
}

function __is_tmux() {
  if is-session-tmux; then
    echo -ne " 僧"
  else
    echo ""
  fi
}

######################################################################################
#                                                                      COLORS & ICONS
#####################################################################################
# you might need to install icon fonts and make them available to terminal
# https://github.com/gabrielelana/awesome-terminal-fonts/wiki/OS-X
icon_branch=''
icon_clean='✔'
icon_merge=''
icon_develop=''
icon_ahead='⇡'
icon_behind='⇣'
icon_staged='✚'
icon_untracked='✘'
icon_alert=''

Red="$(tput setaf 1)"
Green="$(tput setaf 2)"
Yellow="$(tput setaf 3)"
Orange="$(tput setaf 130)"
Blue="$(tput setaf 4)"
Pink="$(tput setaf 5)"
RESET="$(tput sgr0)"

#####################################################################################
#                                                                        OS DETECTION
#####################################################################################
function __os_detection() {
  os=$(get-os)

  if [[ $os == "macos" ]]; then
     echo -ne "${White}"
  elif [[ $os == "arch" ]]; then
    echo -ne "${Blue} "
  elif [[ $os == "manjaro" ]]; then
    echo -ne "${Green} "
  elif [[ $os == "raspbian" ]]; then
    echo -ne "${Pink}"
  fi
}

#####################################################################################
#                                                                              PROMPT
#####################################################################################

function __node_v() {
  nv=$(get-node-version-number)
  if [ $nv != "" ]; then
    # do we have a .nvmrc to compare against
    if [ -r ".nvmrc" ] && [ -f ".nvmrc" ]; then
      expected="$(cat .nvmrc | tr -d '[:space:]' | tr -d '[v]')"
      if is-version-gt $expected $nv; then
        echo -ne "${Red} ${nv} ${icon_alert} "
      else
        echo -ne "${Green} ${nv} "
      fi
    fi
  fi
}

function __git_dirty() {
  if git-is-dirty $1; then
    echo " ${Red}*"
  else
    echo " ${Green}${icon_clean}"
  fi
}

function __git_branch() {
  # show either the branch name or the detached HEAD
  _branch="$(git-get-branch $1)"
  if [[ $_branch != "" ]]; then
    echo -ne "${Yellow}${icon_branch} $_branch"
  else
    hd="$(git-get-head-commit)"
    echo -ne "${Red}${icon_branch} detached HEAD $hd"
  fi
}

function __git_staged() {
  count="$(git-count-staged $1)"
  if [[ $count != "0" ]]; then
    echo -ne "${Green} ${icon_staged}${count}"
  else
    echo ""
  fi
}

function __git_unstaged() {
  count="$(git-count-unstaged $1)"
  if [[ $count != "0" ]]; then
    echo -ne "${Red} ?${count}"
  else
    echo ""
  fi
}

function __git_untracked() {
  count="$(git-count-untracked)"
  if [[ $count != "0" ]]; then
    echo -ne "${Red} ${icon_untracked}${count}"
  else
    echo ""
  fi
}

function __git_behind_ahead() {
  # current branch name
  br="$(git-get-branch)"
  rbr=""

  if [[ $br != "" ]]; then
    # check if remote 'origin' exists
    # yes, for simplicity we assume our remote is 'origin'
    r="$(git remote get-url origin 2>&1 | tail -n1)"
    if [[ $r != "fatal: No such remote 'origin'" ]]; then
      # we want two types of behind/ahead references: 
      # 1. behind count respect reference branch (remote develop/main/master):
      #    - develop's reference to be main/master, 
      #    - feature branch's reference to be develop/main/master
      # 2. behind/ahead count respect same branch in remote

      # check if branch in remote exists (count the refs/remotes)
      branch_count=$(git-count-remote-branch "origin/$br")
      dev_count=$(git-count-remote-branch "origin/develop")
      main_count=$(git-count-remote-branch "origin/main")
      master_count=$(git-count-remote-branch "origin/master")

      if [[ $br != "main" ]] && [[ $br != "master" ]]; then
        # echo "\nnot main nor master, can be develop or feature branch"
        if  [[ $br != "develop" ]] && [[ $dev_count != "0" ]]; then
            # echo "\nfeature branch w/ remote develop"
            rbr="develop"
        else
          # echo "\ndevelop branch or feature branch w/o remote develop"
          if [[ $main_count != "0" ]]; then
            # echo "\nw/ remote main"
            rbr="main"
          else
            if [[ $master_count != "0" ]]; then
              # echo "\nw/ remote master"
              rbr="master"
            fi
          fi
        fi
      fi

      # echo "\nif current branch not develop/main/master and any of these exist in origin, count behind commits"
      if [[ $rbr != "" ]]; then
        # echo "\ncount behind/ahead origin/${rbr}"
        bhr=$(git-count-commits-diff "$br" "origin/$rbr")
        ahr=$(git-count-commits-diff "origin/$rbr" "$br")
        # echo "\nbranch ${br} is behind/ahead origin/${rbr}"
        [[ $bhr != "0" ]] || [[ $ahr != "0" ]] && echo -ne "${Red} ${icon_develop} "
        [[ $bhr != "0" ]] && echo -ne "${icon_behind}${bhr}"
        [[ $ahr != "0" ]] && echo -ne "${icon_ahead}${ahr}"
        [[ $bhr != "0" ]] || [[ $ahr != "0" ]] && echo -ne " "
      fi

      # echo "\nif origin/${br} exists we can count behind/ahead commits"
      if [[ $branch_count != "0" ]]; then
        # echo "\nremote ${br} branch exists, use it as a reference"
        upstream="origin/${br}"
        bh=$(git-count-commits-diff "$br" "$upstream")
        ah=$(git-count-commits-diff "$upstream" "$br")
        # echo "\n${br} is bh:${bh} and ah:${ah} upstream ${upstream}"

        if [[ $bh != "0" ]] && [[ $ah == "0" ]]; then
          # echo "\nbranch ${br} is behind origin ${upstream}"
          echo -ne "${Orange} ${icon_merge} ${icon_behind}${bh}"
        fi
        if [[ $bh == "0" ]] && [[ $ah != "0" ]]; then
          # echo "\nbranch ${br} is ahead origin ${upstream}"
          echo -ne "${Green} ${icon_merge} ${icon_ahead}${ah}"
        fi
        if [[ $bh != "0" ]] && [[ $ah != "0" ]]; then
          # echo "\nbranch ${br} is behind and ahead origin ${upstream}"
          echo -ne "${Orange} ${icon_merge} ${icon_behind}${bh}${Green}${icon_ahead}${ah}"
        fi
        if [[ $bh == "0" ]] && [[ $ah == "0" ]]; then
          # echo "\nbranch ${br} is synced with origin ${upstream}"
          echo -ne "${Green} ${icon_clean}"
        fi
      fi
    fi # origin exists 
  fi # we are in a branch (not detached)
}

function __git_real_time_prompt() {
  PS1="\[\033]0;\W\007\]";

  if [[ "$HOME" == "$PWD" ]] || [[ "$PWD" == "$HOME/.config"* ]]; then
    PS1+="\n\n\[$(__os_detection)\] \u@\h\[$(__is_tmux)\] \[${Red}\]\w "
    PS1+="\n\[$(__git_branch -d)\]\[$(__git_dirty -d)\]\[$(__git_staged -d)\]\[$(__git_unstaged -d)\]"
  else
    PS1+="\n\n\[$(__os_detection)\] \u@\h\[$(__is_tmux)\] \[${Blue}\]\w "

    # modify prompt adding development info if we are in a git repo folder
    if `git status &> /dev/null`; then
      PS1+="\n\[$(__node_v)\]"
      PS1+="\[$(__git_branch)\]\[$(__git_dirty)\]\[$(__git_staged)\]\[$(__git_unstaged)\]\[$(__git_untracked)\]"

      # show behind/ahead info if branches count>0 (maybe we just init'ed git repo)
      bc="$(git branch --list | wc -l | xargs)"
      if [[ $bc != "0" ]]; then
        PS1+="\[$(__git_behind_ahead)\]"
      fi
    fi
  fi

  PS1+="\n\[$(__is_ssh)\]\[${RESET}\] "

  export PS1
}
PROMPT_COMMAND='history -a;history -n;__git_real_time_prompt'
