#!/usr/bin/env bash

#####################################################################################
#                                                                      COLORS & ICONS
#####################################################################################
# you might need to install icon fonts and make them available to terminal
# https://github.com/gabrielelana/awesome-terminal-fonts/wiki/OS-X
: ${os_icon:=''}
: ${node_icon:=''}
: ${branch_icon:=''}
: ${clean_icon:='✔'}
: ${merge_icon:=''}
: ${ahead_icon:='↑'}
: ${behind_icon:='↓'}
: ${staged_icon:='✚'}
: ${untracked_icon:='✘'}
: ${alert_icon:=''}

Red="$(tput setaf 1)"
Green="$(tput setaf 2)"
Yellow="$(tput setaf 3)"
Blue="$(tput setaf 4)"
RESET="$(tput sgr0)"

#####################################################################################
#                                                                              PROMPT
#####################################################################################
dev_jump() {
  echo "\n       ${Yellow}└─"
}

dev_start() {
  echo "${Yellow}("
}

dev_end() {
  echo "${Yellow})"
}

# https://stackoverflow.com/a/24067243
function version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

node_v() {
  if hash node 2>/dev/null; then
    nv=$(node -v | tr -d '[v]')
  fi

  # do we have a .nvmrc to compare against
  if [ -r ".nvmrc" ] && [ -f ".nvmrc" ]; then
    expected="$(cat .nvmrc | tr -d '[:space:]' | tr -d '[v]')"
    if version_gt $expected $nv; then
      [ "$nv" != "" ] && echo -ne "${Red}${node_icon} ${nv}${alert_icon} "
    else
      [ "$nv" != "" ] && echo -ne "${Green}${node_icon} ${nv}"
    fi 
  else 
    [ "$nv" != "" ] && echo -ne "${Green}${node_icon} ${nv}"
  fi
}

git_dirty() {
  local repo_status=$(git status 2>&1 | tail -n1)
  [[ $repo_status != "nothing to commit, working directory clean" ]] && echo " ${Red}*"
}

git_branch() {
  # show either the branch name or the detached HEAD
  _branch="$(git symbolic-ref --short HEAD)"
  if [[ $_branch != "" ]]; then
    echo -ne "${Yellow} ${branch_icon}$_branch"
  else 
    hd="$(git rev-parse --short HEAD | head -n 1)"
    echo -ne "${Red} ${branch_icon} detached HEAD $hd"
  fi
}

staged() {
  count="$(git diff --cached --name-only | wc -l)"
  count=`echo $count | xargs`
  if [[ $count != "0" ]]; then
    echo -ne "${Green} ${staged_icon}${count}"
  else 
    echo ""
  fi 
}

unstaged() {
  count="$(git diff --name-status | wc -l)"
  count=`echo $count | xargs`
  if [[ $count != "0" ]]; then
    echo -ne "${Red} ?${count}"
  else 
    echo ""
  fi 
}

untracked() {
  count="$(git ls-files --others --exclude-standard | wc -l)"`echo $count | sed 's/ *$//g'`
  count=`echo $count | xargs`
  if [[ $count != "0" ]]; then
    echo -ne "${Red} ${untracked_icon}${count}"
  else 
    echo ""
  fi 
}

behindahead() {
  # current branch name
  br="$(git rev-parse --abbrev-ref HEAD)"
  if [[ $br != "HEAD" ]]; then
    # check if remote 'origin' exists
    # yes, for simplicity we assume our remote is 'origin'
    r="$(git remote get-url origin 2>&1 | tail -n1)"
    if [[ $r != "fatal: No such remote 'origin'" ]]; then
      # check if remote branch exists
      # master & squashed branches compare to their remotes
      # all other branches compare to origin/develop
      if [[ $br != "master" ]] && [[ $br != "squashed" ]] && [[ $br != "develop" ]]; then
        rbr="develop"
      else
        rbr="${br}"
      fi

      ub="$(git ls-remote --heads ${r} ${rbr} 2>&1 | sed -n 2p)"
      if [[ $ub != 0 ]] && [[ $ub != "fatal: Could not read from remote repository." ]]; then
        #echo "we have upstream branch in remote origin"
        upstream="origin/${rbr}"
        bh=`git rev-list ${br}..${upstream} --count `;
        bh=`echo $bh | xargs`
        ah=`git rev-list ${upstream}..${br} --count `;
        ah=`echo $ah | xargs`

        if [[ $bh != "0" ]] || [[ $ah != "0" ]]; then
          if [[ $bh != "0" ]]; then
            echo -ne "${Red} ${merge_icon}"
          else
            echo -ne "${Green} ${merge_icon}"
          fi
        fi
        if [[ $bh != "0" ]]; then
          echo -ne "${Red} ${behind_icon}${bh}"
        fi
        if [[ $ah != "0" ]]; then
          echo -ne "${Green} ${ahead_icon}${ah}"
        fi
        if [[ $bh == "0" ]] && [[ $ah == "0" ]]; then
          echo -ne "${Green} ${clean_icon}"
        fi
      fi
    fi
  fi
}

real_time_prompt() {
  PS1="\[\033]0;\W\007\]"; 
  PS1+="\n\[${os_icon}\] \u \[${Blue}\]\w "

  # modify prompt adding development info if we are in a git repo folder
  if `git status &> /dev/null`; then
    PS1+="\[$(dev_jump)\]\[${Yellow}\]\[$(dev_start)\]"
    PS1+="\[$(node_v)\]"
    PS1+="\[$(git_branch)\]\[$(git_dirty)\]\[$(staged)\]\[$(unstaged)\]\[$(untracked)\]"

    # show behind/ahead info if branches count>0 (maybe we just init'ed git repo)
    bc="$(git branch --list | wc -l | xargs)"
    if [[ $bc != "0" ]]; then
      PS1+="\[$(behindahead)\]"
    fi

    PS1+="\[$(dev_end)\]"
  fi

  PS1+="\[${RESET}\]$ "

  export PS1
}
PROMPT_COMMAND='real_time_prompt'
