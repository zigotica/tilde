#!/usr/bin/env bash

#####################################################################################
#                                                                           FUNCTIONS
#####################################################################################

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# start quick server from folder
function zerve() {
  python -m SimpleHTTPServer 7777
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# youtube downloader 
# use: ytd video-url
function ytd() {
  youtube-dl -f 'bestvideo+bestaudio/best/best' --merge-output-format mkv $1
}

# only audio
function ytda() {
	youtube-dl -x --audio-format flac $1
}

# ffmpeg quick edits (remove n secs from start or end of file)
# use: trims 100 'input-file.extension' 'output-file.extension' 
function trims(){ ffmpeg -ss $1 -i "$2" -c copy "$3"; }
function trime(){ ffmpeg -ss 0 -t $1 -i "$2" -c copy "$3"; }

# setup tmux session for development
# will create 1 main pane for coding, and two bottom panes for terminal
# requires being called from inside a tmux window/session
function dev() {
  if [[ ! "$TERM" =~ screen ]]; then
    echo "You need to start a tmux session before running this function"
  else
    # current session id
    id=$(tmux display-message -p '#S' | sed 's/#//g')
    # final session name
    if [[ "$1" != "" ]]; then
      target="$1"
    else
      target=$(echo "${PWD##*/}")
    fi

    # check if target session exists
    if tmux has-session -t $target; then
      # target session exists
      # we need some dirty parsing of the sessions list
      attd=$(tmux ls -F "#{session_name}#{?session_attached,attached,detached}" | grep "$target")
      parsed=$(echo "${attd/$target/}")
      if [[ "$parsed" = "attached" ]]; then
        # target session already attached
        echo "Session target exists and is already attached somewhere else"
      else
        # target session exists but not attached, re-attach + kill current
        TMUX=`tmux attach -t $target`
        tmux switch-client -t $target
        tmux kill-session -t $id
      fi
    else
      # target session doesnt exist, create splits + rename session
      tmux splitw -v -p 30
      tmux splitw -h
      tmux selectp -t 1 
      tmux send-keys "vi" C-m 

      tmux rename-session -t $id $target
    fi
  fi
}
