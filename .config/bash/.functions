#!/usr/bin/env bash

#####################################################################################
#                                                                           FUNCTIONS
#####################################################################################

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Return n number of history items
function hist() {
  history | tail -"$@";
}

# Return history items matching a grep param
function histg() {
  history | grep "$@";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# start quick server from folder
function zerve() {
  python -m http.server 7777
}

# youtube downloader 
# use: ytd video-url
function ytd() {
  youtube-dl -f 'bestvideo+bestaudio/best/best' --merge-output-format mkv $1
}

# only audio
function ytda() {
	youtube-dl -x --audio-format flac $1
}

# ffmpeg quick edits (remove n secs from start or end of file)
# use: trims 100 'input-file.extension' 'output-file.extension' 
function trims(){ ffmpeg -ss $1 -i "$2" -c copy "$3"; }
function trime(){ ffmpeg -ss 0 -t $1 -i "$2" -c copy "$3"; }

# GoTo: find and move to favourite folder using fzf
# then create a tmux session there, requires tmux to be already running
# Inspired by ThePrimeagen
function gt() {
  if [[ ! "$TERM" =~ screen ]]; then
    echo "You need to start a tmux session before running this function"
  else
    favs=$(find ~/.config ~/Documents/personal ~/Documents/work -mindepth 1 -maxdepth 1 -type d | fzf)
    favfolder=$(basename "$favs" | tr . _)

    if ! tmux has-session -t "$favfolder" 2> /dev/null; then
      tmux new-session -s "$favfolder" -c "$favs" -d
    fi

    tmux switch-client -t "$favfolder"
  fi
}

# setup tmux session for development
# will create 1 main pane for coding, and two bottom panes for terminal
# requires being called from inside a tmux window/session
# optional arguments:
# 1: -t target name of the session (by default folder name)
# 2: -l layout (by default vh meaning 1 main on top, 2 on bottom)
#       can also be any combination of v / h
#       for instance:
#       -l hhh will create 3 horizontal splits, while 
#       -l hvvv will create one horizontal then 3 vertical
function dev() {
  if [[ ! "$TERM" =~ screen ]]; then
    echo "You need to start a tmux session before running this function"
  else
    # current session id
    id=$(tmux display-message -p '#S' | sed 's/#//g')

    # default target / layout
    target=$(echo "${PWD##*/}")
    layout="vh"

    # get optional target name and/or layout from  t/l arguments respectively
    while getopts 't:l:' opt
    do
      case $opt in
        t) local target="$OPTARG"; ;;
        l) local layout="$OPTARG"; ;;
      esac
    done

    # check if target session exists
    if tmux has-session -t $target; then
      # target session exists

      # we need some dirty parsing of the sessions list
      attd=$(tmux ls -F "#{session_name}#{?session_attached,attached,detached}" | grep "$target")
      parsed=$(echo "${attd/$target/}")
      if [[ "$parsed" = "attached" ]]; then
        # target session already attached
        echo "Session $target exists and is already attached somewhere else"
      else
        # target session exists but not attached, re-attach + kill current
        TMUX=`tmux attach -t $target`
        tmux switch-client -t $target
        tmux kill-session -t $id
      fi
    else
      # target session doesnt exist

      # create splits
      vh=$(echo $layout | tr -cd 'vh')
      for (( i=0; i<${#vh}; i++ )); do
        what="${vh:$i:1}"
        tmux splitw -$what
      done

      # run vim in 1st split
      tmux selectp -t 1 
      tmux send-keys "vim" C-m 

      # rename session
      tmux rename-session -t $id $target
    fi
  fi

  # if you're going to reuse the same terminal session to manage
  # more than one instance of dev function, you'll need to 
  # export OPTIND so you can run it again using different options
  # export $OPTIND=1
}
