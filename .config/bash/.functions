#!/usr/bin/env bash

#####################################################################################
#                                                                           FUNCTIONS
#####################################################################################

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# youtube downloader 
# use: ytd video-url
function ytd() {
  youtube-dl -f 'bestvideo+bestaudio/best/best' --merge-output-format mkv $1
}

# only audio
function ytda() {
	youtube-dl -x --audio-format flac $1
}

# cheatsheet helper using fzf on predefined languages/utils
# then create a tmux pane to show the cheatsheet (using less)
# requires tmux to be already running
# Inspired by ThePrimeagen
# ctrl+h, see .profile
function cheatsh() {
  if [[ ! "$TERM" =~ screen ]]; then
    echo "You need to start a tmux session before running the chetsheet function"
  else
    languages=$(cat ~/.config/bash/fzf-utils/languages.txt)
    utils=$(cat ~/.config/bash/fzf-utils/utils.txt)
    selected=$(echo -e "$languages\n$utils" | fzf)

    read -p "SEEK IN CHEATSHEET: " what

    if echo "$languages" | grep -qs $selected; then
      tmux splitw -h bash -c "curl cht.sh/$selected/$(echo "$what" | tr " " "+") | less -R"
    else
      tmux splitw -h bash -c "curl cht.sh/$selected~$what | less -R"
    fi
  fi
}

# https://github.com/nvm-sh/nvm#automatically-call-nvm-use
# use node version defined in .nvmrc file automatically upon cd into a project,
# if that project folder includes a .nvmrc file,
# otherwise, use default version defined in nvm ls
cdnvm(){
    cd "$@";
    nvm_path=$(nvm_find_up .nvmrc | tr -d '\n')

    # If there are no .nvmrc file do nothing (use default, so you better have one)
    # There is a .nvmrc file:
    if [[ $nvm_path = *[^[:space:]]* && -s $nvm_path/.nvmrc && -r $nvm_path/.nvmrc ]]; then
      declare nvm_version
      nvm_version=$(<"$nvm_path"/.nvmrc)

      # Add the `v` suffix if it does not exists in the .nvmrc file
      if [[ $nvm_version != v* ]]; then
        nvm_version="v""$nvm_version"
      fi

      # If it is not already installed, install it
      required_version_from_nvm_ls=$(nvm ls --no-colors "$nvm_version" | tail -1 | tr -d '\->*' | tr -d '[:space:]')
      if [[ "$required_version_from_nvm_ls" == "N/A" ]]; then
        nvm install "$nvm_version";
      fi

      nvm_current=$(nvm current)
      if [[ "$nvm_current" != "$nvm_version" ]]; then
        nvm use "$nvm_version";
      fi
    fi
}
alias cd='cdnvm' # alias after the function, just in case

# GoTo: find and move to favourite folder using fzf
# then create a tmux session there (starts tmux if not running)
# Inspired by ThePrimeagen
# ctrl+g, see .profile
function gt() {
  targets=$(cat ~/.config/bash/fzf-utils/dirs-personal.txt  ~/.config/bash/fzf-utils/dirs-work.txt | tr "\n" " " | sed "s|~|$HOME|g")
  selected=$(find $targets -mindepth 1 -maxdepth 1 -type d | fzf)
  foldername=$(basename "$selected" | tr . _)

  if ! tmux has-session -t "$foldername" 2> /dev/null; then
    tmux new-session -s "$foldername" -c "$selected" -d
    tmux send-keys -t "$foldername" "cd $selected" C-m
    if [[ ! "$TERM" =~ screen ]]; then
      tmux attach -t "$foldername"
    else
      tmux switch-client -t "$foldername"
    fi
  else
    tmux attach -t "$foldername"
  fi
}

# Add current folder (in ~ format) to fzf personal/work favourites
# These can then be used by the gt function above
# ctrl+f, see .profile
function f() {
  folder=$(echo $PWD | sed "s|$HOME|~|g")

  # Save in work list by default
  list="Work"
  file="$HOME/.config/bash/fzf-utils/dirs-work.txt"
  workfolder="~/Documents/work"
  projectsfolder="~/Documents/projectes"

  # set personal file as target if not inside work/projectes hierarchy
  if [[ $folder != *"$workfolder"* ]] && [[ $folder != *"$projectsfolder"* ]]; then
    file="$HOME/.config/bash/fzf-utils/dirs-personal.txt"
    list="Personal"
  fi

  # If folder is not listed in file, append it, else remove it
  if ! grep -xqF "$folder" "$file"; then
    echo "$folder" >> $file
    echo "Appended $folder to $list GoTo fzf list"
  else
    grep -xFv "$folder" $file > tmp_$$ && mv -f tmp_$$ $file
    echo "Removed $folder from $list GoTo fzf list"
  fi
}

